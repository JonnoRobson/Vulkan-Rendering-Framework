#version 450
#extension GL_ARB_separate_shader_objects : enable

// inputs
#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct IndirectDrawCommand
{
	uint	indexCount;
	uint	instanceCount;
	uint	firstIndex;
	int		vertexOffset;
	uint	firstInstance;
	uint	padding[3];
};

struct ShapeData
{
	uint offsets[4];
	vec4 min_vertex;
	vec4 max_vertex;
};

// resources
layout(binding = 0) buffer DrawCommandBuffer
{
	IndirectDrawCommand draw_commands[];
};

layout(binding = 1) buffer ShapeDataBuffer
{
	ShapeData shape_data[];	
};

layout(binding = 2) uniform Transforms
{
	mat4 world;
	mat4 view;
	mat4 proj;
} matrices;

layout(push_constant) uniform PushConstants
{
	uint shapeCount;
} push_constants;


void main()
{
	uint index = gl_GlobalInvocationID.x;
	
	if(index >= push_constants.shapeCount)
		return;

	vec4 v0, v1, v2, v3, v4, v5, v6, v7;
	v0 = v1 = v2 = v3 = shape_data[index].min_vertex;
	v4 = v5 = v6 = v7 = shape_data[index].max_vertex;
	
	v1.x = v4.x;
	v2.y = v4.y;
	v3.z = v4.z;

	v5.x = v0.x;
	v6.y = v0.y;
	v7.z = v0.z;

	v0 = matrices.proj * matrices.view * v0;
	v0 /= v0.w;
	if(v0.z >= 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
	}

	v1 = matrices.proj * matrices.view * v1;
	v1 /= v1.w;
	if(v1.z >= 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}
	
	v2 = matrices.proj * matrices.view * v2;
	v2 /= v2.w;
	if(v2.z >= 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}
	
	v3 = matrices.proj * matrices.view * v3;
	v3 /= v3.w;
	if(v3.z >= 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}
	
	v4 = matrices.proj * matrices.view * v4;
	v4 /= v4.w;
	if(v4.z >= 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}
	
	v5 = matrices.proj * matrices.view * v5;
	v5 /= v5.w;
	if(v5.z >= 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}
	
	v6 = matrices.proj * matrices.view * v6;
	v6 /= v6.w;
	if(v6.z > 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}
	
	v7 = matrices.proj * matrices.view * v7;
	v7 /= v7.w;
	if(v7.z > 0.0)
	{
		atomicExchange(draw_commands[index].instanceCount, 1);
		return;
	}

	atomicExchange(draw_commands[index].instanceCount, 0);
}
